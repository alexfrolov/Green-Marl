// Pregel-canonical coloring SCC algorithm 
Procedure color_scc (G:Graph, SCC: N_P<Node>) {
	N_P<Node> color;
	N_P<Bool> updated;
	N_P<Bool> updated_next;
	N_P<Node_Set> transNbrs;

	Bool fin = False;

	While(!fin) {
		fin = True;

		// transpose edgess
		{
			Foreach (i : G.Nodes) (i.SCC == NIL) {
				Foreach (j : i.Nbrs) {
					j.transNbrs.Add(i);
				}
			}
		}

		// trim dangling vertices
		{
			Foreach (i : G.Nodes) (i.SCC == NIL) {
				If (i.transNbrs.Size() == 0 || i.OutDegree() == 0) {
					i.SCC = i;
				}
			}
		}

		// forward coloring
		{
			Bool done = False;

			Foreach (i: G.Nodes)(i.SCC == NIL) {
				i.color = i;
				i.updated = True;
				i.updated_next = False;
			}

			While (!done) {
				done = True;
				Foreach (i: G.Nodes)(i.SCC == NIL && i.updated) {
					Foreach (j: i.Nbrs) 
						If (i.color < j.color) {
							j.color = i.color; 
							j.updated_next = True;
						}
				}
				G.updated = G.updated_next;
				G.updated_next = False;		
				done = ! Exist(n: G.Nodes){n.updated};
			}
		}

		// backward coloring
		{
			Bool done = False;

			Foreach (i : G.Nodes) (i.SCC == NIL) {
				If (i.color == i)
					i.updated = True;
				i.updated_next = False;
			}

			While (!done) {
				done = True;
				Foreach (i: G.Nodes) (i.SCC == NIL && i.updated) {
					i.SCC = i.color;
					Foreach (j: i.transNbrs.Items) {    
						//j.color = i.color;
						If (j.color == i.color) {
							j.updated_next = True;
						}
					}
				}
				G.updated = G.updated_next;
				G.updated_next = False;		
				done = ! Exist(n: G.Nodes){n.updated};
			}
		}

		fin = ! Exist(n: G.Nodes){n.SCC == NIL};
	}//while
}
